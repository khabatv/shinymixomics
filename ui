# Load required libraries
library(shiny)
library(mixOmics)
library(DT)

# UI
ui <- fluidPage(
  titlePanel("Multi-Omics Analysis"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput("omics1_file", "Upload Omics1 Data (e.g., miRNA)", accept = ".txt"),
      fileInput("omics2_file", "Upload Omics2 Data (e.g., mRNA)", accept = ".txt"),
      fileInput("omics3_file", "Upload Omics3 Data (e.g., Proteomics)", accept = ".txt"),
      fileInput("y_file", "Upload Y Data", accept = ".txt"),
      textInput("name_omics1", "Name of Omics1", value = "Omics1"),
      textInput("name_omics2", "Name of Omics2", value = "Omics2"),
      textInput("name_omics3", "Name of Omics3", value = "Omics3"),
      actionButton("run_analysis", "Run Analysis")
    ),
    
    mainPanel(
      DTOutput("summary_table"),
      plotOutput("pls1_plot"),
      plotOutput("pls2_plot"),
      plotOutput("pls3_plot"),
      plotOutput("diablo_plot"),
      plotOutput("indiv_plot"),
      plotOutput("arrow_plot"),
      plotOutput("circos_plot"),
      plotOutput("network_plot"),
      plotOutput("loading_plot"),
      plotOutput("cim_plot"),
      verbatimTextOutput("cv_results")
    )
  )
)

# Server
server <- function(input, output, session) {
  
  # Reactive values to store data
  data_reactive <- reactive({
    req(input$omics1_file, input$omics2_file, input$omics3_file, input$y_file)
    
    omics1 <- read.table(input$omics1_file$datapath, sep = "\t", header = TRUE, row.names = 1)
    omics2 <- read.table(input$omics2_file$datapath, sep = "\t", header = TRUE, row.names = 1)
    omics3 <- read.table(input$omics3_file$datapath, sep = "\t", header = TRUE, row.names = 1)
    Y <- read.table(input$y_file$datapath, sep = "\t", header = TRUE, row.names = 1)
    Y <- factor(Y$Subtype)  # Convert to factor
    
    list(omics1 = omics1, omics2 = omics2, omics3 = omics3, Y = Y)
  })
  
  observeEvent(input$run_analysis, {
    # Get the data
    data <- data_reactive()
    
    # Set names based on user input
    names(data)[1:3] <- c(input$name_omics1, input$name_omics2, input$name_omics3)
    
    # Run analysis as in the original script
    list.keepX <- c(8, 8)  # Arbitrary values of features to keep
    list.keepY <- c(8, 8)
    
    pls1 <- spls(data[[input$name_omics1]], data[[input$name_omics2]], keepX = list.keepX, keepY = list.keepY)
    pls2 <- spls(data[[input$name_omics1]], data[[input$name_omics3]], keepX = list.keepX, keepY = list.keepY)
    pls3 <- spls(data[[input$name_omics2]], data[[input$name_omics3]], keepX = list.keepX, keepY = list.keepY)
    
    # Correlation calculation
    output$summary_table <- renderDT({
      data.frame(
        Comparison = c(paste(input$name_omics1, "vs", input$name_omics2),
                       paste(input$name_omics1, "vs", input$name_omics3),
                       paste(input$name_omics2, "vs", input$name_omics3)),
        Correlation = c(cor(pls1$variates$X, pls1$variates$Y),
                        cor(pls2$variates$X, pls2$variates$Y),
                        cor(pls3$variates$X, pls3$variates$Y))
      )
    })
    
    # Plotting PLS results
    output$pls1_plot <- renderPlot({
      plotVar(pls1, cutoff = 0.5, title = paste("(a)", input$name_omics1, "vs", input$name_omics2), 
              legend = c(input$name_omics1, input$name_omics2),
              var.names = FALSE, style = 'graphics', pch = c(16, 17), cex = c(2, 2),
              col = c('darkorchid', 'lightgreen'))
    })
    
    output$pls2_plot <- renderPlot({
      plotVar(pls2, cutoff = 0.5, title = paste("(b)", input$name_omics1, "vs", input$name_omics3), 
              legend = c(input$name_omics1, input$name_omics3),
              var.names = FALSE, style = 'graphics', pch = c(16, 17), cex = c(2, 2),
              col = c('darkorchid', 'lightgreen'))
    })
    
    output$pls3_plot <- renderPlot({
      plotVar(pls3, cutoff = 0.5, title = paste("(c)", input$name_omics2, "vs", input$name_omics3), 
              legend = c(input$name_omics2, input$name_omics3),
              var.names = FALSE, style = 'graphics', pch = c(16, 17), cex = c(2, 2),
              col = c('darkorchid', 'lightgreen'))
    })
    
    #### DIABLO Analysis ####
    # Create the design matrix
    design <- matrix(0.1, ncol = length(data[1:3]), nrow = length(data[1:3]),
                     dimnames = list(names(data[1:3]), names(data[1:3])))
    diag(design) <- 0  # Set diagonal to 0
    
    # Basic DIABLO model
    basic.diablo.model <- block.splsda(X = data[1:3], Y = data$Y, ncomp = 5, design = design)
    
    # Perform M-fold validation
    perf.diablo <- perf(basic.diablo.model, validation = 'Mfold', folds = 10, nrepeat = 10)
    ncomp <- perf.diablo$choice.ncomp$WeightedVote["Overall.BER", "centroids.dist"]
    
    # Tuning the number of features
    test.keepX <- list(
      mRNA = c(5, 8, 10),
      miRNA = c(5, 8, 10),
      proteomics = c(5, 8, 10)
    )
    tune.result <- tune.block.splsda(X = data[1:3], Y = data$Y, ncomp = ncomp,
                                     test.keepX = test.keepX, design = design,
                                     validation = 'Mfold', folds = 5, nrepeat = 1,
                                     dist = "centroids.dist")
    list.keepX <- tune.result$choice.keepX
    
    # Final DIABLO model
    final.diablo.model <- block.splsda(X = data[1:3], Y = data$Y, ncomp = ncomp, keepX = list.keepX, design = design)
    
    #### DIABLO Plots ####
    output$diablo_plot <- renderPlot({
      plotDiablo(final.diablo.model, ncomp = 1)
    })
    
    output$indiv_plot <- renderPlot({
      plotIndiv(final.diablo.model, ind.names = FALSE, legend = TRUE, title = 'DIABLO Sample Plots')
    })
    
    output$arrow_plot <- renderPlot({
      plotArrow(final.diablo.model, ind.names = FALSE, legend = TRUE, title = 'DIABLO')
    })
    
    output$circos_plot <- renderPlot({
      circosPlot(final.diablo.model, cutoff = 0.7, line = TRUE,
                 color.blocks = c('darkorchid', 'brown1', 'lightgreen'),
                 color.cor = c("chocolate3", "grey20"), size.labels = 1.5)
    })
    
    output$network_plot <- renderPlot({
      network(final.diablo.model, blocks = c(1, 2, 3),
              color.node = c('darkorchid', 'brown1', 'lightgreen'), cutoff = 0.4)
    })
    
    output$loading_plot <- renderPlot({
      plotLoadings(final.diablo.model, comp = 2, contrib = 'max', method = 'median')
    })
    
    output$cim_plot <- renderPlot({
      cimDiablo(final.diablo.model)
    })
    
    output$cv_results <- renderPrint({
      perf.diablo$MajorityVote.error.rate
    })
    
  })
  
}

# Run the application
shinyApp(ui = ui, server = server)
